{
  "hash": "c6ad8e4f5981edbfa0876b16c4a85773",
  "result": {
    "markdown": "---\ntitle: Lab 2 - Bisection Method\nauthor: Connor Robertson\n---\n\n## Introduction\n\nThe bisection method is a numerical method for finding the root of a continuous function $f(x)$ that lies between two points $a,b$ where $f(a)f(b)<0$.\nThis means that $f(a)$ and $f(b)$ are of opposite sign, and thus there must be a root between $a$ and $b$.\nAn example of a function like this is shown in @fig-setting.\n\n![Example of continuous function between $a$ and $b$ where $f(a)f(b) < 0$ and thus a root lies between $a$ and $b$.](images/img1.png){#fig-setting}\n\nThe concept that underpins the bisection method is that as long as $f(a)f(b)<0$, there is guaranteed to be a root between $a$ and $b$.\nSince the initial interval $(a,b)$ is given, the method can iteratively make smaller and smaller intervals whose endpoints satisfy the condition $f(a)f(b)<0$.\nSpecifically, the method halves the interval at each step which is what gives it the name \"bisection\" method.\nThe details of the method can be most easily summarized in the following \"pseudocode\" algorithm.\n\nGiven the initial interval $[a,b]$, the function $f$ where $f(a)f(b) < 0$, and an ending tolerance, $tol$ (the size of the final interval), we compute:\n```matlab\n% While half the interval is bigger than the given accuracy tolerance\nwhile (b-a)/2 > tol\n    % c = the midpoint of a and b\n    % If f(c) = 0, stop                  -- this would be lucky (c=root)!\n    % If f(a)f(c) < 0, then b=c          -- the root is between a and c\n    % Else, a=c                          -- the root is between c and b\nend\n% The final c is an approximate root\n```\n\nNote that this formula does not depend on what the function $f$ is.\nThis is a nice property of the bisection method since it allows you to write one piece of code that can be used for any function.\nOther methods you will see later in this class use information about the function $f$ (such as the derivative) to get faster convergence.\nHowever, these methods are also usually do not work for all functions $f$.\nThis is a classic tradeoff in numerical methods (between the generality and speed of the method).\n\n## Examples\n\nHere I'll write a bisection method function that takes in $f$, $a$, $b$ and $tol$ and outputs the approximate root $c$ and the number of steps taken, $N$.\nAt each step, the function prints the step number and the current approximate root (the midpoint of the current interval).\n\n### Matlab function\n\n::: {.cell execution_count=1}\n``` {.matlab .cell-code}\n%%file MyBisectionMethod.m\nfunction [c, N] = MyBisectionMethod(f, a, b, tol)\n    N = 0;\n    while (b-a)/2 > tol\n        c = (a + b) / 2;\n        if f(c) == 0\n            return\n        elseif f(a)*f(c) < 0\n            b = c;\n        else\n            a = c;\n        end\n        N = N + 1;\n        disp(['At step ' num2str(N) ' approximation is ' num2str((a+b)/2)])\n    end\nend\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCreated file '/home/connor/GDrive/Software/cnrrobertson.github.io/teaching/math340/Lab2_bisection/MyBisectionMethod.m'.\n```\n:::\n:::\n\n\n### Find root of simple function\nNow, using this bisection method code on the function $f(x)=x^2-7$ to find the root $\\sqrt{7}$ with interval $[-1,3]$ and a tolerance of $10^{-5}$:\n\n::: {.cell execution_count=2}\n``` {.matlab .cell-code}\na = -1;\nb = 3;\ntol = 1e-5;\n\nf = @(x) x.^2 - 7;\n[root,steps] = MyBisectionMethod(f, a, b, tol);\ntrue = sqrt(7);\nanswer = ['The true root is ' num2str(true) ' while our approximation is ' num2str(root)];\ndisp(answer)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAt step 1 approximation is 2\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nAt step 2 approximation is 2.5\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nAt step 3 approximation is 2.75\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nAt step 4 approximation is 2.625\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nAt step 5 approximation is 2.6875\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nAt step 6 approximation is 2.6562\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nAt step 7 approximation is 2.6406\nAt step 8 approximation is 2.6484\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nAt step 9 approximation is 2.6445\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nAt step 10 approximation is 2.6465\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nAt step 11 approximation is 2.6455\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nAt step 12 approximation is 2.646\nAt step 13 approximation is 2.6458\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nAt step 14 approximation is 2.6456\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nAt step 15 approximation is 2.6457\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nAt step 16 approximation is 2.6457\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nAt step 17 approximation is 2.6457\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nAt step 18 approximation is 2.6457\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nThe true root is 2.6458 while our approximation is 2.6457\n```\n:::\n:::\n\n\nTheoretically, this should take\n$$\n\\begin{align*}\n N=-1 + \\log_2\\frac{b-a}{\\mathrm{Tol}}\n\\end{align*}\n$$\nsteps on the interval $(a,b)$ with tolerance $Tol$:\n\n::: {.cell execution_count=3}\n``` {.matlab .cell-code}\ntheoryN=log2((b-a)/tol) - 1;    % the value of N as predicted by the formula from class\nanswer = ['We took ' num2str(steps) ' steps while the theory predicts we should take ' num2str(theoryN) ' steps'];\ndisp(answer)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nWe took 18 steps while the theory predicts we should take 17.6096 steps\n```\n:::\n:::\n\n\n### Find root of discontinuous function\nThe method does have some drawbacks in the context of discontinuities.\nFor example, consider the function:\n$$\n\\begin{align*}\nf(x) = \\frac{|x-3|}{x^3 - 3 x^2 + x -3}\n.\\end{align*}\n$$ on the interval $[1, 5]$ which plotted looks like:\n\n::: {.cell execution_count=4}\n``` {.matlab .cell-code}\nfFun = @(x) abs(x-3) ./ (x.^3 - 3.*x.^2 + x - 3);\nX = linspace(1,5,1000);\nY = fFun(X);\nplot(X,Y,'-r','LineWidth',1);   % plot the function\nxlabel('x');\nylabel('f(x)');\ntitle('Plot of $f(x)=\\frac{|x-3|}{x^3-3x^2+x-3}$','interpreter','latex');\n```\n\n::: {.cell-output .cell-output-display}\n![](Lab2_bisection_files/figure-html/cell-5-output-1.png){}\n:::\n:::\n\n\nApplying the bisection code on this interval with a tolerance of $10^{-4}$ gives:\n\n::: {.cell execution_count=5}\n``` {.matlab .cell-code}\n[c3,N3] = MyBisectionMethod(fFun,1,4,1e-4);\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAt step 1 approximation is 3.25\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nAt step 2 approximation is 2.875\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nAt step 3 approximation is 3.0625\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nAt step 4 approximation is 2.9688\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nAt step 5 approximation is 3.0156\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nAt step 6 approximation is 2.9922\nAt step 7 approximation is 3.0039\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nAt step 8 approximation is 2.998\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nAt step 9 approximation is 3.001\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nAt step 10 approximation is 2.9995\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nAt step 11 approximation is 3.0002\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nAt step 12 approximation is 2.9999\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nAt step 13 approximation is 3.0001\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nAt step 14 approximation is 3\n```\n:::\n:::\n\n\nAlthough the function returned a answer, since the function is discontinuous, the answer does not represent a root.\n\n",
    "supporting": [
      "Lab2_bisection_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}