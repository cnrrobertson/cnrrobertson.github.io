{
  "hash": "d58b7c8d3f15b49921e3e896a7509c5b",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Lab 1 - Brief Introduction to Matlab\nauthor: Connor Robertson\n<!-- date: today -->\n---\n\n## Example 1: Arrays\n\nHere are a few basic calculations and constructions that you will need to use throughout the course for building arrays of numbers. Take note of these constructions as they will be useful for the entire course.\n\n### Creating arrays\nA row vector, `X=(0 1 2 3)` is commonly written in three ways:\n\n**1. Using brackets:**\n\n```{matlab}\nX=[0 1 2 3]\n```\n\nIf `;` is included at the end of the line, the output will be supressed.\nThe command will still be executed, but nothing will be printed.\n\n```{matlab}\nX=[0 1 2 3];\n```\n\n**2. Using the `linspace` function:**\n\n```{matlab}\nX=linspace(0, 3, 4)\n```\n\nThis gives `4` equally spaced points between and including `0` and `3` as shown above.\n`linspace` is a function included in the Matlab standard library i.e. it is always available.\n\n**3. In the form `a:step:b`:**\n\n```{matlab}\nX=0:1:3\n```\n\nThis will give all points between and including `0` to `3` with step size `1` between each point.\nIt can also be written as `X=0:3` which uses the default step size `1`.\n\n### Array operations\nOnce we have these arrays, we can apply an operation to each element in the array.\nFor example, to compute $Y = [e^0, e^2, e^2, e^3]$, we use the Matlab standard library function `exp` for exponential:\n\n```{matlab}\nY=exp(X)\n```\n\nOr to apply `sin` to each element of the array:\n\n```{matlab}\nS=sin(X)\n```\n\nOr to make an array `Q` with the square root to each element of the array `X`:\n\n```{matlab}\nQ=sqrt(X)\n```\n\n\n### Standard array forms\nTo create a $2\\times2$ identity matrix:\n\n```{matlab}\nId=[1 0; 0 1]\n```\n\nNote that the `;` in the array definition marks the end of a row.\nThere is also a Matlab standard library function `eye` that can be used as:\n\n```{matlab}\nId2=eye(2)\n```\n\nA $4\\times 4$ identity matrix is then:\n\n```{matlab}\nId4=eye(4)\n```\n\nTo make a length 4 column vector (4 rows, 1 column) of all zeros, we can use the standard library `zeros` function:\n\n```{matlab}\nz = zeros(4,1)\n```\n\nThis can be extended to a $4\\times4$ matrix of all zeros:\n\n```{matlab}\nZ=zeros(4,4)\n```\n\nOr a $3\\times3$ matrix of all ones:\n\n```{matlab}\nW=ones(3,3)\n```\n\n\n### Array manipulation\nIf we wanted to compute the matrix-vector product of `Id4` with our previous row vector `X`, we would first need to transpose `X` into a column vector.\nThis can be done with either the standard library `transpose` function or the operator `'`:\n\n```{matlab}\nY=Id4 * X'\n```\n\nor\n\n```{matlab}\nY=Id4 * transpose(X)\n```\n\nFailing to transpose will give an error:\n\n```{matlab}\nId4 * X\n```\n\n\n## Example 2: Common operations\nIn Matlab, the `*` operator means \"dot product\" when working with matrices and vectors.\nIf we instead wish to apply a multiplication operation to each element of an array, we preface the operation with a dot, i.e. `.*`.\nThis elementwise operator syntax with an additional period extends to division and exponents as `./` and `.^` respectively.\nObserve the difference between the products `A*B` and `A.*B` in the following examples:\n\n```{matlab}\nA=[1 0; 0 1]\nB=[0 1; 1 0]\nx = [1 ; 0]\n```\n\nThe dot product is `A*B`:\n\n```{matlab}\nA*B\nA * x\n```\n\nThe elementwise product is `A.*B`:\n\n```{matlab}\nA.*B\n```\n\nThis product is the product of each element of `A` with each corresponding element of `B`.\n\n## Example 3: Plotting in Matlab\nTo plot a line in Matlab, you will need to pass in arrays of $x$ and $y$ positions to the standard library `plot` function.\nThese positions will be used as $(x,y)$ coordinates through which the line will pass.\nIn this example we will define our function using an inline (or anonymous) function.\nMore complicated functions can be found at the bottom of this page.\n\nFirst, create the function we would like to plot:\n\n```{matlab}\nf=@(x) x.^3;\n```\n\nThis is now a function variable `f` to which we can pass in a value `x` and it will compute $x^3$.\nWe use `.^` so that we can pass an array `x` into the function.\nWe can now create a set of 1000 equally spaced `x` values between -2 and 2:\n\n```{matlab}\nX =linspace(-2, 2, 1000);\n```\n\nand cube each of them using our function `f` to get an array of 1000 `y` points:\n\n```{matlab}\nY=f(X);\n```\n\nWe can now pass `X` and `Y` as our $x$ and $y$ positions to the `plot` function to get a line that passes through each $(x,y)$ in order.\n\n```{matlab}\nplot(X,Y)\n```\n\nThere are several additional parameters we can pass into the `plot` function to change the line style and color of the lines.\nJudgement should be used to determine which plot options to use to make your results of your work clear.\n\nWe can now create a new `figure` (a new plotting area with no lines on it) and plot our points with several additional decorations:\n\n```{matlab}\nfigure()\nplot(X,Y,'r','LineWidth',1); % 'r' => red line\n\nhold on\nplot(X,X);\n\ngrid on\n\naxis([-1 1 -2 2]);\n\nxlabel('x','fontsize',14); \nylabel('f(x)','fontsize',14);\n\ntitle('Plot example',...\n    'fontsize',14);\n\nlegend('x^3', 'x');\n```\n\nThe `'LineWidth'` marks that the width will be changed and 1 is the selected line width.\nThe `hold on` command will keep the current `figure` for all new plots and plotting commands until a new figure is created with `figure()` or the hold is removed with `hold off`.\nThis allows more lines to be added to the current figure.\n`grid on` turns on grid lines for the figure and `axis` is a function to determine the limits of the x and y axes.\n`xlabel` and `ylabel` are functions for labeling the figure axes and `title` is a function to give the figure a title.\nNote that the `...` tells Matlab that the function inputs are continued on the next line.\nThe `legend` function allows for annotating the plots in the figure in the order they were plotted.\n\n## Example 4: Control flow\nOne standard programming construct is that of a \"for loop.\"\nThe following simple example shows how to implement a for loop to add the numbers between 1 and N. \nWe will find the sum of the first 50 numbers\n\n\n```{matlab}\nN=50;\n\n% Initialize the sum variable as 0. We are going to add to this\nsumN = 0;\nfor i=1:N\n    \n    % In each iteration we will add the new number i to our sum\n    sumN = sumN+i;\nend\n```\n\n\n`disp` is the matlab function for \"displaying\" or printing a value or array.\n`num2str` is the matlab function to convert a number to a \"string\" which is a datatype meant for sequences of letters.\nThis is especially useful for printing by combining different strings as shown below:\n\n\n```{matlab}\nresult = ['The sum of the first ' num2str(N) ' numbers is ' num2str(sumN)];\ndisp(result)\n```\n\nThis algorithm is also packaged as a Matlab function `SumN` at the bottom of this file.\nIn this course, all algorithms will be written as a function so they can be easily reused.\nHowever, all functions in Matlab scripts must be placed at the end of the file, so scroll down to see the function `SumN`.\n\n```{matlab}\ntotal=SumN(N);\nresult2 = ['The Sum is still ', num2str(total)];\ndisp(result2)\n```\n\n\n## Example 5: A simple numerical method (Taylor series)\nAs an application of the examples above, the following shows how to approximate the $\\sin$ function at a point $x$using the Taylor series of $\\sin$ (centered at 0).\nThis makes use of for loops as demonstrated above.\n\nIf we consider $x=1$ and use the first $N=20$ terms in the Taylor series, we initialize our variables:\n\n```{matlab}\nx = 1;\nN = 20;\n```\n\nWe then initialize a variable `my_sin1` in which we will store the result and use the for loop to add each term evaluated at $x=1$ to the variable:\n\n```{matlab}\nmy_sin1 = 0;\nfor n=0:N\n    new_term = (-1)^n * (x^(2*n+1)) / factorial(2*n + 1);\n    my_sin1 = my_sin1 + new_term;\nend\n```\n\nWe can compare our approximation with Matlab's approximation of $\\sin(1)$ by comparing it with the standard library function `sin`:\n\n```{matlab}\ndisp(\"My answer:\")\ndisp(my_sin1)\ndisp(\"Matlab's answer:\")\ndisp(sin(1))\n```\n\nA function that takes as inputs `x` and `N` and computes the taylor series approximation of $\\sin$ as we just have for `x=1,N=20` can be seen at the bottom of this file under the name `my_sin`.\nWe can verify that it gives the same result:\n\n```{matlab}\ndisp(my_sin(1, 20))\n```\n\n\n## Functions\n```matlab\nfunction [output] = SumN(input)\n    % The names \"input\" and \"output\" are chosen to make it clear how this\n    % function works. The names don't matter as long as they are consistent.\n    N=input;\n    sum=0;\n    for i=1:N\n        % In each iteration we will add the new number to our sum\n        sum=sum+i;\n    end\n    output=sum;\nend;\n```\n```matlab\nfunction [answer] = my_sin(x, N)\n    answer = 0;\n    for n=0:N\n        new_term = (-1)^n * (x^(2*n+1)) / factorial(2*n + 1);\n        answer = answer + new_term;\n    end\nend\n```\n\n",
    "supporting": [
      "Lab1_matlab_intro_files"
    ],
    "filters": [],
    "includes": {}
  }
}